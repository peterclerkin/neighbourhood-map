{"version":3,"sources":["MapContainer.js","App.js","serviceWorker.js","index.js"],"names":["MapContainer","state","venues","query","markers","users","infowindow","_this","props","google","maps","InfoWindow","error","mapError","onclickLocation","that","Object","assertThisInitialized","document","querySelector","addEventListener","e","target","nodeName","markerInd","findIndex","m","title","toLowerCase","innerText","populateInfoWindow","displayInfowindow","addMarkers","bounds","LatLngBounds","forEach","venue","ind","marker","Marker","position","lat","location","lng","map","name","addListener","setState","concat","toConsumableArray","extend","fitBounds","user","service","places","PlacesService","geocoder","Geocoder","setAnimation","window","Animation","BOUNCE","setTimeout","geocode","results","status","_this2","this","GeocoderStatus","OK","getDetails","placeId","place_id","place","PlacesServiceStatus","setContent","getPosition","open","alert","handleValueChange","value","_this3","fetch","then","data","ok","json","Error","statusText","response","loadMap","catch","err","toString","mapRef","refs","node","ReactDOM","findDOMNode","center","LatLng","mapConfig","assign","zoom","mapTypeId","Map","_this$state","l","i","includes","setVisible","close","length","react_default","a","createElement","className","role","type","placeholder","aria-labelledby","onChange","filter","getVisible","key","tabIndex","ref","gm_authFailure","Component","getElementsByTagName","item","onerror","console","log","mapContainerElemt","erroElement","innerHTML","appendChild","App","toggleSideBar","classList","toggle","MapContainer_MapContainer","GoogleApiWrapper","apiKey","Boolean","hostname","match","render","src_App_0","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.31ad50bf.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport ReactDOM from 'react-dom'\n\nexport default class MapContainer extends Component {\n\n    //Component State\n    state = {\n        //Names and locations for the markers \n        venues: [],\n        query: '',\n        markers: [],\n        users: [],\n        infowindow: new this.props.google.maps.InfoWindow(),\n        error: null,\n        mapError: null\n    };\n\n\n    componentDidMount() {\n        //Get 6 FourSquare (third party) API details\n        const url = 'https://api.foursquare.com/v2/venues/search?client_id=NB4TPAA2Z5R310AIM1TQAIZHV20XYWONFFHG0T23BP2QFEK0&client_secret=LCFAR5MAWSRI0KYFBQATKOD10HGTFGAAGBX0KZ4RNMU4U1UD&limit=6&v=20180323&ll=54.9535897,-7.7406985';\n        fetch(url)\n            .then(data => {\n                if (data.ok) {\n                    //console.log(data.json());\n                    return data.json();\n                } else {\n                    throw new Error(data.statusText)\n                }\n            })\n            .then(data => {\n                const venues = data.response[\"venues\"];\n                this.setState({ venues: venues });\n                this.loadMap();\n                this.onclickLocation()\n            })\n            .catch(err => {\n                this.setState({ error: err.toString() })\n            })\n    }\n\n    //Load map details\n    loadMap() {\n        if (this.props && this.props.google) {\n            const { google } = this.props;\n            const maps = google.maps;\n            const mapRef = this.refs.map;\n            const node = ReactDOM.findDOMNode(mapRef);\n            let lat = 54.9535897;\n            let lng = -7.7406985;\n            const center = new maps.LatLng(lat, lng);\n            const mapConfig = Object.assign({}, {\n                center: center,\n                zoom: 10,\n                mapTypeId: 'roadmap'\n            });\n\n            this.map = new maps.Map(node, mapConfig);\n            this.addMarkers()\n        } \n    }\n\n    //Menu onclick to show marker info window\n    onclickLocation = () => {\n        const that = this;\n        const { infowindow } = this.state;\n\n        const displayInfowindow = (e) => {\n            const { markers } = this.state;\n            const markerInd = markers.findIndex(m => m.title.toLowerCase() === e.target.innerText.toLowerCase());\n            that.populateInfoWindow(markers[markerInd], infowindow, that.state.users[markerInd])\n\n        };\n        document.querySelector('.location-list').addEventListener('click', function (e) {\n            if (e.target && e.target.nodeName === \"LI\") {\n                displayInfowindow(e)\n            }\n        })\n    };\n\n    //Add markers on the map\n    addMarkers = () => {\n        const { users } = this.state;\n        const { google } = this.props;\n        let { infowindow } = this.state;\n        const bounds = new google.maps.LatLngBounds();\n\n        this.state.venues.forEach((venue, ind) => {\n            const marker = new google.maps.Marker({\n                position: { lat: venue.location.lat, lng: venue.location.lng },\n                map: this.map,\n                title: venue.name\n            });\n            marker.addListener('click', () => {\n                this.populateInfoWindow(marker, infowindow, users[ind])\n            });\n            this.setState((state) => ({\n                markers: [...state.markers, marker]\n            }));\n            bounds.extend(marker.position)\n        });\n        this.map.fitBounds(bounds)\n    };\n\n    //Populate infowindows with content\n    populateInfoWindow = (marker, infowindow, user) => {\n        const { google } = this.props;\n        const service = new google.maps.places.PlacesService(this.map);\n        const geocoder = new google.maps.Geocoder();\n\n        if (infowindow.marker !== marker) {\n            //Bounce animation for the marker\n            infowindow.marker = marker.setAnimation(window.google.maps.Animation.BOUNCE);\n            setTimeout(function () {\n                marker.setAnimation(null);\n            }, 1000);\n            //Content for infowindows\n            geocoder.geocode({ 'location': marker.position }, function (results, status) {\n                if (status === google.maps.GeocoderStatus.OK) {\n                    if (results[1]) {\n                        service.getDetails({\n                            placeId: results[1].place_id\n                        }, (place, status) => {\n                            if (status === google.maps.places.PlacesServiceStatus.OK) {\n                                infowindow.setContent(`<h4>Name: <strong>${marker.title}</strong></h4>\n                             <div>Latitude: ${marker.getPosition().lat()}</div>\n                             <div>Longitude: ${marker.getPosition().lng()}</div>`);\n                                infowindow.open(this.map, marker);\n                            }\n                        });\n                        //Alert if no results are found \n                    } else {\n                        window.alert('No results found');\n                    }\n                    //Alert if the geocoder fails\n                } else {\n                    window.alert('Geocoder failed due to: ' + status);\n                }\n            });\n            //Close click for the infowindow\n            infowindow.addListener('closeclick', () => {\n                infowindow.marker = null\n            });\n        }\n    };\n    //Update state so input box shows current query value\n    handleValueChange = (e) => {\n        this.setState({ query: e.target.value })\n    };\n\n    render() {\n        //Show & hide markers based on the search input\n        const {markers, venues, query, infowindow} = this.state;\n        if (query) {\n            venues.forEach((l, i) => {\n                if (l.name.toLowerCase().includes(query.toLowerCase())) {\n                    markers[i].setVisible(true)\n                } else {\n                    if (infowindow.marker === markers[i]) {\n                        infowindow.close()\n                    }\n                    markers[i].setVisible(false)\n                }\n            })\n        } else {\n            venues.forEach((l, i) => {\n                if (markers.length && markers[i]) {\n                    markers[i].setVisible(true)\n                }\n            })\n        }\n        \n        \n        //Content showing the map & sidebar\n        return (\n            \n            <div>\n                {this.state.error ? (\n                        <div className=\"error\">\n                            An error has occurred; please try again later\n                            <div className=\"error-description\">{this.state.error}</div>\n                        </div>) :\n                    (<div className=\"container\">\n                        <nav className=\"sidebar sidebar-hide\">\n                            <div className=\"search-bar\">\n                                <input role=\"search\" type=\"text\" placeholder=\"Filter..\" aria-labelledby=\"search-bar\"\n                                       value={this.state.value} onChange={this.handleValueChange}/>\n                            </div>\n                            <ul className=\"location-list\">{\n                                markers.filter(m => m.getVisible()).map((m, i) =>\n                                    (<li role=\"link\" key={i} tabIndex=\"0\">{m.title}</li>))\n                            }\n                            </ul>\n                        </nav>\n                        <div role=\"application\" className=\"map\" ref=\"map\">\n                            Loading map...\n                            {this.state.Error || <div className=\"error\">{this.gm_authFailure()}</div>}\n                        </div>\n                    </div>)}\n            </div>\n        )\n    }\n    gm_authFailure() {\n        return (\n            <div>Please refresh the page and try again!</div>\n        );\n    }\n}\n\n","import React, { Component } from 'react';\nimport './App.css';\nimport { GoogleApiWrapper } from 'google-maps-react';\nimport MapContainer from './MapContainer';\n\n//Handling for when the Google API has a problem on request!\ndocument.addEventListener(\"DOMContentLoaded\", function(e) {\n  let scriptTag = document.getElementsByTagName('SCRIPT').item(1);\n  scriptTag.onerror = function(e) {\n    console.log('Sorry! We cant access Google Maps API for now!')\n    let mapContainerElemt = document.querySelector('#root');\n    let erroElement = document.createElement('div');\n    erroElement.innerHTML = '<div class=\"error-msg\">Sorry! We cant access Google Maps API for now! </div>'\n    mapContainerElemt.appendChild(erroElement)\n  }\n})\n\nclass App extends Component {\n\n  componentDidMount() {\n    document.querySelector('.menu-icon').addEventListener('click', this.toggleSideBar)\n    \n  }\n\n  toggleSideBar = () => {\n    document.querySelector('.sidebar').classList.toggle('sidebar-hide')\n  }\n\n  \n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <div className=\"menu-icon\">\n            <div className=\"menu-line\"></div>\n            <div className=\"menu-line\"></div>\n            <div className=\"menu-line\"></div>\n          </div>\n          <h1 className=\"App-title\">Neighbourhood User Map</h1>\n        </header>\n        <MapContainer google={this.props.google} />\n      </div>\n    );\n  }\n}\n\nexport default GoogleApiWrapper({\n  apiKey: 'AIzaSyC7vgVATg6_LqIfmx61Y6RT-AaBY11TefA'\n})(App)\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}